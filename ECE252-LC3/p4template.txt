; Your Name: Haozhe Wu
; Partner's Name (if any): YuJian Zhou
; (Both partner's must also submit a partners.txt file.)
; Date: 12/13/2021
;
; Mark the boxes below [ ] by replacing the space with an X as in [X]
;
; [X] I/we certify that the code herein is my/our own authorship - 
;     I/we have not used anyone else's code (in whole of in part) for
;     my/our modifications, and I/we have not shared my/our code in 
;     any form with anyone else.
;
; Complete the subroutines in the following order.
; Mark which subroutine(s) you've successfully completed.
; [X] 1. subroutine PRINT_DIGIT completed
; [X] 2. subroutine PRINT_INT completed
; [X] 3. subroutine MUL completed
; [X] 4. subroutine CUBED completed
;
; -----------------------------------------------------
; Copyright (c) 2021 Jim Skrentny - All Rights Reserved
; Posting this publicly is prohibited.
; -----------------------------------------------------
;
    .ORIG    x3000
    BRnzp TEST_BEGIN
;
; STEP 1: PRINT_DIGIT
; *******************
; Print a single-digit integer N, where N is between 0 and 9
;
; arguments:    in R0 is N
;


PRINT_DIGIT

; ************************* Start your code here *************************


; Registers storage 
	ST	R7, PRINT_DIGIT7 ; Store register 7 to PRINT_DIGIT7
	ST	R0, PRINT_DIGIT0 ; Store register 0 to PRINT_DIGIT0
    ST	R4, PRINT_DIGIT4 ; Store register 4 to PRINT_DIGIT4

; Ouput initializing
    LD	R4, OFFSET	; Restore register 4 to OFFSET
	ADD	R0, R0, R4	; Add R4 in OFFSET to R0
    TRAP	x21     ; Output the ASCII character stored in R0

; Register restore
    LD	R0,	PRINT_DIGIT0 ; Restore Register 0 from PRINT_DIGIT0
    LD	R4, PRINT_DIGIT4 ; Restore Register 4 from PRINT_DIGIT4
    LD	R7, PRINT_DIGIT7 ; Restore Register 7 from PRINT_DIGIT7 

; Return
	RET	; Return stored code

; Memory Storage 
PRINT_DIGIT0	.FILL x1234	; Store value stored in PRINT_DIGIT0 to x1234
PRINT_DIGIT4	.FILL x4567	; Store value stored in PRINT_DIGIT4 to x4567
PRINT_DIGIT7	.FILL x7890	; Store value stored in PRINT_DIGIT7 to x7890
OFFSET	.FILL  x0030	; Store value stored in OFFSET to x0030


; ************************** End your code here **************************


;
; STEP 2: PRINT_INT
; *****************
; Print an two-digit integer N followed by a new line character (x000A).
; N is between 0 and 99. For N < 10, the leading 0 should be printed.
;
; This subroutine must call PRINT_DIGIT to print a single digit. 
;
; arguments:    in R0 is N
;


PRINT_INT

; ************************* Start your code here *************************
; Registers storage
	ST	R0, PRINT_INT0 ; Store register 0 to PRINT_INT0
	ST	R7, PRINT_INT7 ; Store register 7 to PRINT_INT7
	ST	R4, PRINT_INT4	; Store register 4 to PRINT_INT4
	ST	R5, PRINT_INT5	; Store register 5 to PRINT_INT5
	ST	R6, PRINT_INT6	; Store register 6 to PRINT_INT6

; Register initializing
	AND	R4, R4, #0	; Initializing R4 with R4 and count to zero
	AND	R5, R5, #0	; Initializing R5 with R5 and count to zero
	LD	R6, NEG10 ; Restore R6 with NEG10
	
; Loop 
LOOPFIRST	ADD	R0, R0, R6	; Decrement R0 with R0 and count to R6
			BRn	DONEFIRST	; If null, no more chars
			ADD	R4, R4, #1	; Increment R4 with R4 and count to 1
			BRnzp	LOOPFIRST	; End loop 

; Display
DONEFIRST  	ADD	R5, R0, #10	; Increase R5 with R0 and count to 10
			ADD	R0, R4, #0	; Decrement R0 with R4 and count to zero
			JSR	PRINT_DIGIT	; Display value in R0
			ADD	R0, R5, #0	; Decrement R0 with R5 and count to zero
			JSR	PRINT_DIGIT	; Display value in R0
			LD	R0, LINESPACER ; Store value in R0 with LINESPACER
			TRAP   	x21		; Output the ASCII character stored in R0

; Register restore
    LD  R0, PRINT_INT0 ; Restore Register 0 from PRINT_INT0
    LD	R7, PRINT_INT7 ; Restore Register 7 from PRINT_INT7
	LD  R4, PRINT_INT4 ; Restore Register 4 from PRINT_INT4
	LD	R5, PRINT_INT5 ; Restore Register 5 from PRINT_INT5
	LD  R6, PRINT_INT6 ; Restore Register 6 from PRINT_INT6

; Return
	RET ; Return stored code

; Memory Storage 
PRINT_INT0	.FILL x1234	; Store value stored in PRINT_INT0 to x1234
PRINT_INT7	.FILL x4567	; Store value stored in PRINT_INT7 to x4567
PRINT_INT4	.FILL x7890	; Store value stored in PRINT_INT4 to x7890
PRINT_INT5	.FILL x1234	; Store value stored in PRINT_INT5 to x1234
PRINT_INT6	.FILL x4567	; Store value stored in PRINT_INT6 to x4567
LINESPACER	.FILL x000A	; Store value in LINESPACER with x000A
NEG10	.FILL xFFF6	; Store value stored in NEG10 to xFFF6

; ************************** End your code here **************************


;
; STEP 3: MUL
; ***********
; Subroutine that multiplies two positive integers A * B.
;
; arguments:    in R0 is A and in R1 is B
; return value: in R2 will be A * B
;


MUL

; ************************* Start your code here *************************

; Registers storage
	ST	R0, MUL0 ; Store register 0 to MUL0
	ST	R1, MUL1 ; Store register 1 to MUL1

; Register initializing
	AND	R2, R2, #0	; Initializing R2 with R2 and count to zero

; Loop
LOOPSECOND	ADD	R1, R1, #-1	; Decrement R1 with R1 and count to -1
			BRn	DONESECOND	; If negative, no more chars
			ADD	R2, R2, R0	; Increment R2 with R2 and count to R0
			BRnzp	LOOPSECOND	; End loop
			
; Display
DONESECOND	LD 	R0, MUL0 ; Store value in R0 with MUL0
			LD	R1, MUL1 ; Store value in R1 with MUL1
			
; Return
	RET ; Return stored code

; Memory Storage 
MUL0	.FILL x1234 ; Store value stored in MUL0 to x1234
MUL1	.FILL x4567 ; Store value stored in MUL1 to x4567

; ************************** End your code here **************************


;
; STEP 4: CUBED
; *************
; Subroutine that calculates N ^ 3.
; It MUST call subroutine MUL to do multiplications.
;
; argument:     in R0 is N, a positive integer
; return value: in R0 will be N ^ 3
;


CUBED

; ************************* Start your code here *************************

; Registers storage
	ST	R7, CUBED7 ; Store register 7 to CUBED7
	ST	R1, CUBED1 ; Store register 1 to CUBED1
	ST	R2, CUBED2 ; Store register 2 to CUBED2

; Register initializing
	ADD	R1, R0, #0	; Decrement R0 with R0 and count to zero	
	JSR	MUL	; Multiply R1 with R0
	ADD	R0, R2, #0	; Decrement R0 with R2 and count to zero
	JSR	MUL	; Multiply R1 with R0
	ADD	R0, R2, #0	; Decrement R0 with R2 and count to zero

; Register restore
	LD	R7, CUBED7 ; Restore Register 7 from CUBED7
	LD	R1, CUBED1 ; Restore Register 1 from CUBED1
	LD	R2, CUBED2 ; Restore Register 2 from CUBED2

; Return
	RET ; Return stored code

; Memory Storage 
CUBED7	.FILL x1234 ; Store value stored in CUBED7 to x1234
CUBED1	.FILL x4567 ; Store value stored in CUBED1 to x4567
CUBED2	.FILL x7890 ; Store value stored in CUBED2 to x7890

; ************************** End your code here **************************



; ************************************************************************
; *************** DO NOT MODIFY ANYTHING BELOW THIS LINE *****************
; ************************************************************************

;
; MAIN SECTION
; ************
; DO NOT REMOVE OR MODIFY ANYTHING IN THE MAIN SECTION BELOW
;
TEST_BEGIN
;
; ************************* TEST FOR PRINT_DIGIT *************************
;
    ; initialize the registers for checking callee saving
    LD R1, INIT_REG_VAL
    LD R2, INIT_REG_VAL
    LD R3, INIT_REG_VAL
    LD R4, INIT_REG_VAL
    LD R5, INIT_REG_VAL
    LD R6, INIT_REG_VAL

    ; print the message
    LEA R0, PRINT_DIGIT_MSG
    PUTS

    ; test the PRINT_DIGIT subroutine to print digits from 9 down to 0
    AND R0, R0, #0               ; R0 stores the digit to print
    ADD R0, R0, #9               ; initialize the current digit to 9
PRINT_DIGIT_LOOP_BEGIN
    BRn PRINT_DIGIT_LOOP_END     ; exit the loop if the digit is below 0
    JSR PRINT_DIGIT              ; print the current digit
    ADD R0, R0, #-1              ; decrement the digit
    BRnzp PRINT_DIGIT_LOOP_BEGIN
PRINT_DIGIT_LOOP_END

    ; check if the original values in the registers are preserved
    LD R0, INIT_REG_VAL_NEG
    ADD R1, R1, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED
    ADD R2, R2, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED
    ADD R3, R3, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED
    ADD R4, R4, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED
    ADD R5, R5, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED
    ADD R6, R6, R0
    BRnp PRINT_DIGIT_REG_SAVING_FAILED

    BRnzp TEST_PRINT_DIGIT_END

PRINT_DIGIT_REG_SAVING_FAILED
    LEA R0, REG_SAVING_MSG
    PUTS

TEST_PRINT_DIGIT_END

;
; ************************** TEST FOR PRINT_INT **************************
;
    ; initialize the registers for checking callee saving
    LD R1, INIT_REG_VAL
    LD R2, INIT_REG_VAL
    LD R3, INIT_REG_VAL
    LD R4, INIT_REG_VAL
    LD R5, INIT_REG_VAL
    LD R6, INIT_REG_VAL

    ; print the message
    LEA R0, PRINT_INT_MSG
    PUTS

    ; test the PRINT_INT subroutine to print integers from 15 down to 00
    AND R0, R0, #0              ; R0 is the current integer to pint
    ADD R0, R0, #15             ; initialize the current integer to 15
PRINT_INT_LOOP_BEGIN
    BRn PRINT_INT_LOOP_END      ; exit the loop if the integer is below 0
    JSR PRINT_INT               ; print the current integer
    ADD R0, R0, #-1             ; decrement the integer
    BRnzp PRINT_INT_LOOP_BEGIN
PRINT_INT_LOOP_END

    ; check if the original values in the registers are preserved
    LD R0, INIT_REG_VAL_NEG
    ADD R1, R1, R0
    BRnp PRINT_INT_REG_SAVING_FAILED
    ADD R2, R2, R0
    BRnp PRINT_INT_REG_SAVING_FAILED
    ADD R3, R3, R0
    BRnp PRINT_INT_REG_SAVING_FAILED
    ADD R4, R4, R0
    BRnp PRINT_INT_REG_SAVING_FAILED
    ADD R5, R5, R0
    BRnp PRINT_INT_REG_SAVING_FAILED
    ADD R6, R6, R0
    BRnp PRINT_INT_REG_SAVING_FAILED

    BRnzp TEST_PRINT_INT_END

PRINT_INT_REG_SAVING_FAILED
    LEA R0, REG_SAVING_MSG
    PUTS

TEST_PRINT_INT_END

;
; ***************************** TEST FOR MUL *****************************
;
    ; initialize the registers for checking callee saving
    LD R3, INIT_REG_VAL
    LD R4, INIT_REG_VAL
    LD R5, INIT_REG_VAL
    LD R6, INIT_REG_VAL

    ; print the message
    LEA R0, MUL_MSG
    PUTS

    ; test the MUL subroutine to multiply two numbers
    AND R0, R0, #0
    ADD R0, R0, #13       ; initialize the first operand to 13
    AND R1, R1, #0
    ADD R1, R1, #6        ; initialize the second operand to 6
    JSR MUL               ; multiply and store the result in R2
    AND R0, R2, R2        ; move the result of MUL from R2 to R0
    JSR PRINT_INT         ; print the value in R0

    ; check if the original values in the registers are preserved
    LD R0, INIT_REG_VAL_NEG
    ADD R3, R3, R0
    BRnp MUL_REG_SAVING_FAILED
    ADD R4, R4, R0
    BRnp MUL_REG_SAVING_FAILED
    ADD R5, R5, R0
    BRnp MUL_REG_SAVING_FAILED
    ADD R6, R6, R0
    BRnp MUL_REG_SAVING_FAILED

    BRnzp TEST_MUL_END

MUL_REG_SAVING_FAILED
    LEA R0, REG_SAVING_MSG
    PUTS

TEST_MUL_END

;
; **************************** TEST FOR CUBED ****************************
;
    ; initialize the registers for checking callee saving
    LD R1, INIT_REG_VAL
    LD R2, INIT_REG_VAL
    LD R3, INIT_REG_VAL
    LD R4, INIT_REG_VAL
    LD R5, INIT_REG_VAL
    LD R6, INIT_REG_VAL

    ; print the message
    LEA R0, CUBED_MSG
    PUTS

    ; call the CUBED subroutine to cube a number
    AND R0, R0, #0
    ADD R0, R0, #3         ; initialize the operand to 3
    JSR CUBED              ; call cube and store the result in R0
    JSR PRINT_INT          ; print the value in R0

    ; check if the original values in the registers are preserved
    LD R0, INIT_REG_VAL_NEG
    ADD R1, R1, R0
    BRnp CUBED_REG_SAVING_FAILED
    ADD R2, R2, R0
    BRnp CUBED_REG_SAVING_FAILED
    ADD R3, R3, R0
    BRnp CUBED_REG_SAVING_FAILED
    ADD R4, R4, R0
    BRnp CUBED_REG_SAVING_FAILED
    ADD R5, R5, R0
    BRnp CUBED_REG_SAVING_FAILED
    ADD R6, R6, R0
    BRnp CUBED_REG_SAVING_FAILED

    BRnzp TEST_CUBED_END

CUBED_REG_SAVING_FAILED
    LEA R0, REG_SAVING_MSG
    PUTS

TEST_CUBED_END

TEST_END
    HALT                   ; stop the program execution

;
; DATA SECTION
; ************
; DO NOT REMOVE OR MODIFY ANYTHING IN THE DATA SECTION
;
; You should NOT directly use INIT_REG_VAL, INIT_REG_VAL_NEG, or their
; values in your code. 
;
; You'll lose ALL points for callee saving if you do so
;
INIT_REG_VAL     .FILL    x600D     ; DO NOT USE THIS LABEL/VALUE
INIT_REG_VAL_NEG .FILL    #-24589   ; DO NOT USE THIS LABEL/VALUE
PRINT_DIGIT_MSG  .STRINGZ "Digits 9 to 0 printed in a single line:\n"
PRINT_INT_MSG    .STRINGZ "\nIntegers 15 to 00 printed in each line:\n"
MUL_MSG          .STRINGZ "\n13 * 6 = "
CUBED_MSG        .STRINGZ "\n3 ^ 3 = "
REG_SAVING_MSG   .STRINGZ "\nCheck for callee saving failed\n"

    .END